{"version":3,"sources":["PokemonCard.js","PokemonList.js","Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["PokemonCard","pokeName","pokeID","className","src","alt","PokemonList","pokemons","map","pokemon","i","name","id","key","SearchBox","OnSearch","type","placeholder","onChange","App","OnSearchChange","event","setState","searchField","target","value","state","fetch","then","resp","json","data","pokeData","results","poke","this","filteredPokemons","filter","toLowerCase","includes","toLocaleLowerCase","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kRAgBeA,G,YAbK,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAC7B,OACI,yBAAKC,UAAU,sDACX,yBACIC,IAAG,mFAA8EF,EAA9E,QACHG,IAAI,YAER,4BAAKJ,GACL,gCAAMC,MCQHI,EAhBK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACI,6BACKA,EAASC,KAAI,SAACC,EAASC,GACpB,OACI,kBAAC,EAAD,CACIT,SAAUM,EAASG,GAAGC,KACtBT,OAAQK,EAASG,GAAGE,GACpBC,IAAKH,SCKdI,EAdG,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjB,OACI,yBAAKZ,UAAU,SACX,2BACIa,KAAK,OACLL,KAAK,YACLM,YAAY,UACZd,UAAU,qCACVe,SAAUH,MC8CXI,E,kDAlDX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1C,EAAKC,MAAQ,CACTnB,SAAU,GACVgB,YAAa,IAJP,E,gEAYO,IAAD,OAChBI,MAAM,+CACDC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GACH,IAAMC,EAAWD,EAAKE,QAAQzB,KAAI,SAAC0B,EAAMtB,GAKrC,MAJoB,CAChBD,KAAMuB,EAAKvB,KACXC,GAAIA,EAAK,MAIjB,EAAKU,SAAS,CAAEf,SAAUyB,S,+BAI5B,IAAD,EAC6BG,KAAKT,MAA/BnB,EADH,EACGA,SAAUgB,EADb,EACaA,YACZa,EAAmB7B,EAAS8B,QAAO,SAAC5B,GACtC,GACIA,EAAQE,KACH2B,cACAC,SAAShB,EAAYiB,sBAC1B/B,EAAQG,IAAMW,EAEd,OAAOd,KAGf,OACI,6BACI,wBAAIN,UAAU,UAAd,iBACA,wBAAIA,UAAU,UAAd,eACA,kBAAC,EAAD,CAAWY,SAAUoB,KAAKf,iBAC1B,kBAAC,EAAD,CAAab,SAAU6B,S,GA7CrBK,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cb7c6f8b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./PokemonCard.css\";\r\n\r\nconst PokemonCard = ({ pokeName, pokeID }) => {\r\n    return (\r\n        <div className=\"tc bg-light-blue dib pd3 ba5 ma2 grow bw2 shadow-5\">\r\n            <img\r\n                src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokeID}.png`}\r\n                alt=\"pokemon\"\r\n            ></img>\r\n            <h1>{pokeName}</h1>\r\n            <h2>#{pokeID}</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PokemonCard;\r\n","import React from \"react\";\r\nimport PokemonCard from \"./PokemonCard\";\r\n\r\nconst PokemonList = ({ pokemons }) => {\r\n    return (\r\n        <div>\r\n            {pokemons.map((pokemon, i) => {\r\n                return (\r\n                    <PokemonCard\r\n                        pokeName={pokemons[i].name}\r\n                        pokeID={pokemons[i].id}\r\n                        key={i}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PokemonList;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ OnSearch }) => {\r\n    return (\r\n        <div className=\"tc p3\">\r\n            <input\r\n                type=\"text\"\r\n                name=\"searchbox\"\r\n                placeholder=\"Pokemon\"\r\n                className=\"tc pa3 ba b--blue bg-lightest-blue\"\r\n                onChange={OnSearch}\r\n            ></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport PokemonList from \"./PokemonList\";\nimport SearchBox from \"./Searchbox\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            pokemons: [],\n            searchField: \"\",\n        };\n    }\n\n    OnSearchChange = (event) => {\n        this.setState({ searchField: event.target.value });\n    };\n\n    componentDidMount() {\n        fetch(\"https://pokeapi.co/api/v2/pokemon?limit=150\")\n            .then((resp) => resp.json())\n            .then((data) => {\n                const pokeData = data.results.map((poke, id) => {\n                    const pokeResults = {\n                        name: poke.name,\n                        id: id + 1,\n                    };\n                    return pokeResults;\n                });\n                this.setState({ pokemons: pokeData });\n            });\n    }\n\n    render() {\n        const { pokemons, searchField } = this.state;\n        const filteredPokemons = pokemons.filter((pokemon) => {\n            if (\n                pokemon.name\n                    .toLowerCase()\n                    .includes(searchField.toLocaleLowerCase()) ||\n                pokemon.id == searchField\n            ) {\n                return pokemon;\n            }\n        });\n        return (\n            <div>\n                <h1 className=\"tittle\">P O K E D E X</h1>\n                <h3 className=\"tittle\">by SantiBru</h3>\n                <SearchBox OnSearch={this.OnSearchChange} />\n                <PokemonList pokemons={filteredPokemons} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}